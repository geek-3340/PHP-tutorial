<?php
// Javascriptとの差分を中心に解説します。

// 変数
$msg = 'こんにちは、世界！'; // 変数は$で始まる
$msg_2 = 'こんにちは、世界！'; 
// 変数名は英数字とアンダースコア(_)のみ使用可能
// 変数名は数字で始めることはできない
// 変数名は大文字と小文字を区別する
// camelCaseやsnake_caseなどの命名規則を使用することが一般的
print $msg.'<br>';
print $msg_2.'<br>';


// 可変変数
$x = 'title';
$title = '可変変数の値';
print ${$x}.'<br>'; // ${$x} = $titleとなる、{}は省略可


// 定数(constとdefine関数の２つの方法で定義可能)
// 定数は$を付けず、UPPER_CASEで命名する
const TAX = 1.0; // constキーワードで定義
define('TAX2', 2.0); // define関数で定義

//constの特徴
// 1. トップレベルで定義する必要がある
// 2. クラス定数の宣言が可能
// 3. 変数、関数を代入できない

// defineの特徴
// 1. トップレベル以外で定義できる
// 2. クラス定数の宣言ができない
// 3. 変数、関数を代入できる


// 定義済み定数
print 'PHPのバージョン: '.PHP_VERSION.'<br>'; 
print '実行中のファイル名: '.__FILE__.'<br>';
print '実行中のディレクトリ: '.__DIR__.'<br>';
print '実行中の行番号: '.__LINE__.'<br>';
print 'etc...<br>';

// データ型

// リテラルとは値そのものを指す
// リテラルの種類

// bool型
// PHPでは、空文字列、0（string,int,float,double）、空配列、nullはfalseと評価される
if(""){
  print '空文字列はfalseの為、こちらは実行されません。<br>';
}else{
  print '空文字列はfalseと評価されます。<br>';
}

// 整数リテラル
$int = 123; // 10進数
print $int.'<br>';

// 浮動小数点リテラル
$float = 123.45; // 小数点を含む数値
print $float.'<br>';

// 文字列リテラル
$str = '文字列'; // シングルクォートで囲む
$str2 = "文字列"; // ダブルクォートで囲む
// 文字列にクオートを含める場合（\でエスケープできる）
$str3 = 'シングルクォートは\'エスケープ\'できます。';
$str4 = "ダブルクォートは\"エスケープ\"できます。";
// シングルクォートとダブルクォートの違い
$str5 = "変数の値は{$str}です。"; // ダブルクォート内で変数展開（Parce）される
$str6 = '変数の値は{$str}です。'; // シングルクォート内では変数展開されない
// エスケープシーケンス
$str7 = "改行は\nここです。"; // \nで改行
$str8 = "タブは\tここです。"; // \tでタブ
// ヒアドキュメント
$str9 = <<<EOD
ヒアドキュメントは
複数行の文字列を
書くのに便利です。
EOD;
// ヒアドキュメントでの変数展開
// 無印またはダブルクォートで変数展開が可能
$str10 = <<<EOD
ヒアドキュメントでの変数展開は可能です。
変数の値は{$str}です。
EOD;
// シングルクォートで囲むと変数展開されない
$str11 = <<<'EOD'
ヒアドキュメントでの変数展開は可能です。
変数の値は{$str}です。
EOD;

print $str.'<br>';
print $str2.'<br>';
print $str3.'<br>';
print $str4.'<br>';
print $str5.'<br>';
print $str6.'<br>';
print $str7.'<br>';
print $str8.'<br>';
print $str9.'<br>';
print $str10.'<br>';
print $str11.'<br>';

// nullリテラル
$null; // 値が設定されていない場合
$null2 = null; // 明示的にnullを設定

 // 配列
  $array = ["りんご", "ばなな", "みかん"]; // 配列は[]で定義
  print_r($array); // 配列の内容を確認
  print '<br>'.$array[0].'<br>'; // 配列の最初の要素を出力

  $array[] = "ぶどう"; // 配列に要素を追加
  print_r($array); // 配列の内容を確認
  print '<br>';

  // 連想配列
  $assoc_array = [
    "りんご" => "apple",
    "ばなな" => "banana",
    "みかん" => "orange"
  ];
  print_r($assoc_array); // 連想配列の内容を確認
  print '<br>'.$assoc_array["りんご"].'<br>'; // 連想配列のキー"りんご"の値を出力

  // 多次元配列
  $multi_array = [
    ["りんご", "ばなな"],
    ["みかん", "ぶどう"]
  ];
  print_r($multi_array); // 多次元配列の内容を確認
  print '<br>'.$multi_array[1][0].'<br>'; // 多次元配列の要素を出力
